extends base

block variables
	- var pageTitle = "How does it work?"
	- var pageDescription = "Installation instructions and usage guide for Google Analytics Web Tester. Includes code samples to validate proper Analytics tracking of a website."
	- var pageSubtitle = "How-to Guide"
	- var pageHeader = "How does it work?"
	- var pageName = "How does it work"
	- var pageUrl = "how-does-it-work.html"
	- var pageTwitterCardDescription = "Installation instructions and usage guide for Google Analytics Web Tester. Includes code samples to validate proper Google Analytics tracking of a website, whether using direct 'ga()' calls or GTM."

block content
	h2.sub-header Motivation

	h3.sub-header The problem

	p Developing websites often require interventions from multiple people, from developers to QAs, Business Analysts to Digital Analysts, and many more. On large modern websites with rich user interactions, like typical E-Commerce sites, validating Analytics features can become tricky.

	p While everyone agrees that these features are essential in order to gauge the success of a website, it might take a few iterations before starting to gather reliable, actionable data. Incomplete implementations due to cut back features or short deadlines, lack of understanding of best practices, lack of ownership are but a few causes of improper or unreliable data.

	p Without reliable or complete data, decisions cannot be made. Insights cannot be gathered. Reports cannot be analysed.

	p This is why members of the team should all be mindful of the importance of collecting proper data as soon as possible in the development lifecycle. As soon as a feature with an Analytics component is added, it should be part of a test plan.

	p Only testing Analytics requirements can be long. Few people are willing to manually execute test suites requiring opening browser tabs and waiting for data to appear in the <em>Realtime</em> View... And thus, it is easy to stop executing these tests. And then, it is too late.

	p Once in production, data is skewed, missing, incomplete or incorrect.

	h3.sub-header The solution

	p The solution is to run tests regularly, and to involve the whole team.

	p By allowing tests to be run automatically, in real browsers, in multiple resolutions, by mimicking the actions real users do, it becomes possible to gain visibility on the data collected. Reacting to changes becomes easier, changing implementations without losing features becomes easier to validate, and people become more involved in the process because they can now see the data, which is no more invisible to them.

	p This is the problem <strong>Google Analytics Web Tester</strong> tries to solve.


	h2.sub-header How it works

	p The tool packages a set of helper functions for <a href="http://angular.github.io/protractor/#/" target="_blank">Protractor</a>, an end-to-end test framework runnings tests against an application running in a real browser, interacting with it as a user would.

	p Using <strong>Protractor</strong> as a test runner, the tool injects custom JavaScript code into the browser for each page loaded, so that calls made to Analytics' <code>ga()</code> function can be intercepted.

	p Thus, it becomes possible to return it to Protractor and validate that it matches the expected values.

	h3.sub-header Example

	p For example, say you wanted to send a Custom Event to Google Analytics when clicking on a button:

	pre
		code(class="javascript hljs well").
			jQuery('#jumbotronCTA').on('click', function (event) {
			   ga('send', 'event', 'Button', 'Click', 'Jumbotron CTA');
			});

	p The library would then intercept that data and return it to Protractor after simulating a click on the button. Using that information, developers and QAs can write tests validating that the data sent to Analytics actually matches the expected values:

	pre
		code(class="javascript hljs well").
			// (In Protractor test file.)
			// ...

			// Actual intercepted data:
			// gaData = ['send', 'event', 'Button', 'Click', 'Jumbotron CTA']

			expect( gaData ).toEqual( ['send', 'event', 'Button', 'Click', 'Jumbotron CTA'] ); // true! Success!

	p <strong>Note:</strong> <em>The data format is covered in more details on <a href="#gettingGAData">Getting the Google Analytics Event data</a>.</em>

	p Now say, due to some last-minute changes the day before deploying to production, someone accidentally replaces the Custom Event Label to the following:

	pre
		code(class="javascript hljs well").
			jQuery('#jumbotronCTA').on('click', function (event) {
			   ga('send', 'event', 'Button', 'Click', 'Add to Cart CTA');
			});

	p When running the Protractor test scenarios, this would cause a failure, since the labels "Add to Cart CTA" will not match the expected "Jumbotron CTA":

	pre
		code(class="javascript hljs well").
			// (In Protractor test file.)
			// ...

			// Actual intercepted data:
			// gaData = ['send', 'event', 'Button', 'Click', 'Add to Cart CTA']

			expect( gaData ).toEqual( ['send', 'event', 'Button', 'Click', 'Jumbotron CTA'] ); // false!

	p With this test failing, the accidental code change can be reverted and the test suites can run without error. No loss of data in production!


	h2.sub-header#gettingGAData Getting the Google Analytics Event data

	h3 Base mechanics

	p How do you know which Event structure to expect in order to write your tests?

	p Let's say your standard <code>ga()</code> call looks like this when clicking on the Jumbotron CTA of the demo application (will be the same if Event Tracking is set through GTM <span style="color: red;">*</span>):

	pre
		code(class="javascript hljs well").
			ga('send', 'event', 'Button', 'Click', 'Jumbotron CTA');
			    │       │        │         │        └──> 5. Event Label
			    │       │        │         └───────────> 4. Event Action
			    │       │        └─────────────────────> 3. Event Category
			    │       └──────────────────────────────> 2. (Standard Google Analytics parameter)
			    └──────────────────────────────────────> 1. (Standard Google Analytics parameter)

	p Then, after the <code>ga()</code> is executed, the value of <code>window.GAWebTester.getLastEvent()</code> will be:

	pre
		code(class="javascript hljs well").
			  ['send', 'event', 'Button', 'Click', 'Jumbotron CTA']
			    │       │        │         │        └──> 5. Event Label
			    │       │        │         └───────────> 4. Event Action
			    │       │        └─────────────────────> 3. Event Category
			    │       └──────────────────────────────> 2. (Standard Google Analytics parameter)
			    └──────────────────────────────────────> 1. (Standard Google Analytics parameter)

	p <span style="color: red;">*</span>: If using Event tracking through Google Tag Manager (GTM), then the Container will generate some JavaScript exactly matching the pattern of the <code>ga()</code> call above. Just add the send and event values to the Array.

	h3 Getting more samples

	p More Spec file samples are available for the following Google Analytics features:

	ul
		li: a(href="examples-pageviews.html", title="Pageviews Code Samples") Pageviews
		li: a(href="examples-events.html", title="Events Code Samples") Custom Events
		li: a(href="examples-custom-metrics.html", title="Custom Metrics Code Samples") Custom Metrics
		li: a(href="examples-custom-dimensions.html", title="Custom Dimensions Code Samples") Custom Dimensions
		li: a(href="examples-enhanced-ecommerce.html", title="Enhanced E-Commerce Code Samples") Enhanced E-Commerce
		li: a(href="examples-content-grouping.html", title="Content Grouping Code Samples") Content Grouping
		li: a(href="examples-social-interactions.html", title="Social Interactions Code Samples") Social Interactions
		li: a(href="examples-user-timings.html", title-"User Timings Code Samples") User Timings
		li: a(href="examples-cross-device-tracking.html", title="Cross-Device Tracking") Cross-Device Tracking
		li: a(href="examples-exception-tracking.html", title="Exception Tracking") Exception Tracking
