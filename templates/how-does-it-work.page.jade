extends base

block variables
	- var pageTitle = "How does it work?"
	- var pageDescription = "Installation instructions and usage guide for Google Analytics Web Tester. Includes code samples to validate proper Analytics tracking of a website."
	- var pageSubtitle = "How-to Guide"
	- var pageHeader = "How does it work?"
	- var pageName = "How does it work"
	- var pageUrl = "how-does-it-work.html"
	- var pageTwitterCardDescription = "Installation instructions and usage guide for Google Analytics Web Tester. Includes code samples to validate proper Google Analytics tracking of a website, whether using direct 'ga()' calls or GTM."

block content
	p The tool packages a set of helper functions for <a href="http://angular.github.io/protractor/#/" target="_blank">Protractor</a>, an end-to-end test framework runnings tests against an application running in a real browser, interacting with it as a user would.

	p It's fast, lightweight, easy to configure, and integrates beautifully with existing build systems, providing nice integration reports with Jenkins, Travis CI and many others.


	h2.sub-header How it works

	p Using <strong>Protractor</strong> as a test runner, the tool injects custom JavaScript code into the browser for each page loaded, so that calls made to Analytics' <code>ga()</code> function can be intercepted.

	p Thus, it becomes possible to return it to Protractor and validate that it matches the expected values.

	h3.sub-header Example

	p For example, say you wanted to send a Custom Event to Google Analytics when clicking on a button:

	pre
		code(class="javascript hljs well").
			jQuery('#jumbotronCTA').on('click', function (event) {
			   ga('send', 'event', 'Button', 'Click', 'Jumbotron CTA');
			});

	p The library would then intercept that data and return it to Protractor after simulating a click on the button. Using that information, developers and QAs can write tests validating that the data sent to Analytics actually matches the expected values:

	pre
		code(class="javascript hljs well").
			// (In Protractor test file.)
			// ...

			// Actual intercepted data:
			// gaData = ['send', 'event', 'Button', 'Click', 'Jumbotron CTA']

			expect( gaData ).toEqual( ['send', 'event', 'Button', 'Click', 'Jumbotron CTA'] ); // true! Success!

	p <strong>Note:</strong> <em>The data format is covered in more details on <a href="#gettingGAData">Getting the Google Analytics Event data</a>.</em>

	p Now say, due to some last-minute changes the day before deploying to production, someone accidentally replaces the Custom Event Label to the following:

	pre
		code(class="javascript hljs well").
			jQuery('#jumbotronCTA').on('click', function (event) {
			   ga('send', 'event', 'Button', 'Click', 'Add to Cart CTA');
			});

	p When running the Protractor test scenarios, this would cause a failure, since the labels "Add to Cart CTA" will not match the expected "Jumbotron CTA":

	pre
		code(class="javascript hljs well").
			// (In Protractor test file.)
			// ...

			// Actual intercepted data:
			// gaData = ['send', 'event', 'Button', 'Click', 'Add to Cart CTA']

			expect( gaData ).toEqual( ['send', 'event', 'Button', 'Click', 'Jumbotron CTA'] ); // false!

	p With this test failing, the accidental code change can be reverted and the test suites can run without error. No loss of data in production!


	h2.sub-header#gettingGAData Getting the Google Analytics Event data

	h3 Base mechanics

	p How do you know which Event structure to expect in order to write your tests?

	p Let's say your standard <code>ga()</code> call looks like this when clicking on the Jumbotron CTA of the demo application (will be the same if Event Tracking is set through GTM <span style="color: red;">*</span>):

	pre
		code(class="javascript hljs well").
			ga('send', 'event', 'Button', 'Click', 'Jumbotron CTA');
			    │       │        │         │        └──> 5. Event Label
			    │       │        │         └───────────> 4. Event Action
			    │       │        └─────────────────────> 3. Event Category
			    │       └──────────────────────────────> 2. (Standard Google Analytics parameter)
			    └──────────────────────────────────────> 1. (Standard Google Analytics parameter)

	p Then, after the <code>ga()</code> is executed, the value of <code>window.GAWebTester.getLastEvent()</code> will be:

	pre
		code(class="javascript hljs well").
			  ['send', 'event', 'Button', 'Click', 'Jumbotron CTA']
			    │       │        │         │        └──> 5. Event Label
			    │       │        │         └───────────> 4. Event Action
			    │       │        └─────────────────────> 3. Event Category
			    │       └──────────────────────────────> 2. (Standard Google Analytics parameter)
			    └──────────────────────────────────────> 1. (Standard Google Analytics parameter)

	p <span style="color: red;">*</span>: If using Event tracking through Google Tag Manager (GTM), then the Container will generate some JavaScript exactly matching the pattern of the <code>ga()</code> call above. Just add the send and event values to the Array.

	h3 Getting more samples

	p More Spec file samples are available for the following Google Analytics features:

	ul
		li: a(href="examples-pageviews.html", title="Pageviews Code Samples") Pageviews
		li: a(href="examples-events.html", title="Events Code Samples") Custom Events
		li: a(href="examples-custom-metrics.html", title="Custom Metrics Code Samples") Custom Metrics
		li: a(href="examples-custom-dimensions.html", title="Custom Dimensions Code Samples") Custom Dimensions
		li: a(href="examples-enhanced-ecommerce.html", title="Enhanced E-Commerce Code Samples") Enhanced E-Commerce
		li: a(href="examples-content-grouping.html", title="Content Grouping Code Samples") Content Grouping
		li: a(href="examples-social-interactions.html", title="Social Interactions Code Samples") Social Interactions
		li: a(href="examples-user-timings.html", title-"User Timings Code Samples") User Timings
		li: a(href="examples-cross-device-tracking.html", title="Cross-Device Tracking") Cross-Device Tracking
		li: a(href="examples-exception-tracking.html", title="Exception Tracking") Exception Tracking
