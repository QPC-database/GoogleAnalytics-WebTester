extends base

block variables
	- var pageTitle = "Exception Tracking Code Samples"
	- var pageDescription = "Implementation guide including code samples to validate tracking of Google Analytics Exceptions using Google Analytics Web Tester."
	- var pageSubtitle = ""
	- var pageHeader = "Tracking Exceptions"
	- var pageName = "Exception Tracking"
	- var pageUrl = "examples-exception-tracking.html"

block content
	p To validate tracking of Exceptions, use the following Array in your Jasmine expectations:

	pre
		code(class="javascript hljs").
			['send', 'exception', { ──────────────────> 1&2. (Standard Google Analytics parameters)
			   'exDescription': 'DatabaseError', ─────> 3. Exception Description
			   'exFatal': false, ─────────────────────> 4. Indicates whether the exception was fatal
			   'appName', 'myApp', ───────────────────> 5. Application Name
			   'appVersion', '1.0' ───────────────────> 6. Application Version Number
			}]

	p Using direct <code>ga()</code> calls, checking proper tracking of Exceptions could be done in the following manner:

	pre
		code(class="javascript hljs").
			describe('The Google Analytics "Exception" tracking', function () {
			   beforeEach(function () {
			      // Load the page to test:
			      browser.get('index.html');
			
			      // Register the Google Analytics Event Data Interceptor:
			      browser.driver.registerGoogleAnalyticsEventDataInterceptor();
			   });
			 
			   it('should register an Exception when causing an application crash', function (done) {
			      // Trigger a "crash" in the browser:
			      //
			      //   try {
			      //      throw new Error('Something bad happened.');
			      //   } catch (err) {
			      //      // Send the exception to Google Analytics.
			      //      ga('send', 'exception', {
			      //         'exDescription': err.message,
			      //         'exFatal': true,
			      //         'appName': 'Demo_Application',
			      //         'appVersion': '1.0'
			      //      });
			      //   }

			      // Get the "LastEvent" object back from the browser:
			      browser.driver.executeScript(function () {
			         return window.GAWebTester.getLastEvent();
			      })
			      .then(
			         // Validate the content of the "LastData" object:
			         function successCallback (LastData) {
			            expect( LastData ).toEqual( ['send', 'exception', {
			               'exDescription': 'Something bad happened',
			               'exFatal': true,
			               'appName': 'Demo_Application',
			               'appVersion': '1.0'
			            }] );
			         },
			         // If there was an error getting back the "LastData" object from the browser, fail the test:
			         function errorCallback (error) {
			            fail('Should not have received Error: ' + JSON.stringify(error));
			         }
			      )
			      .then(done);
			   });
			});
